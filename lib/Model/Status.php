<?php
/**
 * Status
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 内测云分发开发者API接口
 *
 * 内测云开发者服务平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henryxm@163.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Status Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Status implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blind' => 'bool',
        'blind_reserve' => 'bool',
        'blind_reserve_unit' => 'float',
        'blind_unit' => 'float',
        'magic' => 'bool',
        'magic_unit' => 'float',
        'quick' => 'bool',
        'quick_unit' => 'float',
        'reserve' => 'bool',
        'reserve_unit' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'blind' => null,
        'blind_reserve' => null,
        'blind_reserve_unit' => null,
        'blind_unit' => null,
        'magic' => null,
        'magic_unit' => null,
        'quick' => null,
        'quick_unit' => null,
        'reserve' => null,
        'reserve_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blind' => 'blind',
        'blind_reserve' => 'blindReserve',
        'blind_reserve_unit' => 'blindReserveUnit',
        'blind_unit' => 'blindUnit',
        'magic' => 'magic',
        'magic_unit' => 'magicUnit',
        'quick' => 'quick',
        'quick_unit' => 'quickUnit',
        'reserve' => 'reserve',
        'reserve_unit' => 'reserveUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blind' => 'setBlind',
        'blind_reserve' => 'setBlindReserve',
        'blind_reserve_unit' => 'setBlindReserveUnit',
        'blind_unit' => 'setBlindUnit',
        'magic' => 'setMagic',
        'magic_unit' => 'setMagicUnit',
        'quick' => 'setQuick',
        'quick_unit' => 'setQuickUnit',
        'reserve' => 'setReserve',
        'reserve_unit' => 'setReserveUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blind' => 'getBlind',
        'blind_reserve' => 'getBlindReserve',
        'blind_reserve_unit' => 'getBlindReserveUnit',
        'blind_unit' => 'getBlindUnit',
        'magic' => 'getMagic',
        'magic_unit' => 'getMagicUnit',
        'quick' => 'getQuick',
        'quick_unit' => 'getQuickUnit',
        'reserve' => 'getReserve',
        'reserve_unit' => 'getReserveUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blind'] = $data['blind'] ?? null;
        $this->container['blind_reserve'] = $data['blind_reserve'] ?? null;
        $this->container['blind_reserve_unit'] = $data['blind_reserve_unit'] ?? null;
        $this->container['blind_unit'] = $data['blind_unit'] ?? null;
        $this->container['magic'] = $data['magic'] ?? null;
        $this->container['magic_unit'] = $data['magic_unit'] ?? null;
        $this->container['quick'] = $data['quick'] ?? null;
        $this->container['quick_unit'] = $data['quick_unit'] ?? null;
        $this->container['reserve'] = $data['reserve'] ?? null;
        $this->container['reserve_unit'] = $data['reserve_unit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blind
     *
     * @return bool|null
     */
    public function getBlind()
    {
        return $this->container['blind'];
    }

    /**
     * Sets blind
     *
     * @param bool|null $blind 标记该系统是否支持盲盒设备证书能立即秒出激活的功能
     *
     * @return self
     */
    public function setBlind($blind)
    {
        $this->container['blind'] = $blind;

        return $this;
    }

    /**
     * Gets blind_reserve
     *
     * @return bool|null
     */
    public function getBlindReserve()
    {
        return $this->container['blind_reserve'];
    }

    /**
     * Sets blind_reserve
     *
     * @param bool|null $blind_reserve 标记该系统是否支持盲盒预定设备证书的功能
     *
     * @return self
     */
    public function setBlindReserve($blind_reserve)
    {
        $this->container['blind_reserve'] = $blind_reserve;

        return $this;
    }

    /**
     * Gets blind_reserve_unit
     *
     * @return float|null
     */
    public function getBlindReserveUnit()
    {
        return $this->container['blind_reserve_unit'];
    }

    /**
     * Sets blind_reserve_unit
     *
     * @param float|null $blind_reserve_unit 盲盒预定证书服务单价
     *
     * @return self
     */
    public function setBlindReserveUnit($blind_reserve_unit)
    {
        $this->container['blind_reserve_unit'] = $blind_reserve_unit;

        return $this;
    }

    /**
     * Gets blind_unit
     *
     * @return float|null
     */
    public function getBlindUnit()
    {
        return $this->container['blind_unit'];
    }

    /**
     * Sets blind_unit
     *
     * @param float|null $blind_unit 盲盒秒出证书单价
     *
     * @return self
     */
    public function setBlindUnit($blind_unit)
    {
        $this->container['blind_unit'] = $blind_unit;

        return $this;
    }

    /**
     * Gets magic
     *
     * @return bool|null
     */
    public function getMagic()
    {
        return $this->container['magic'];
    }

    /**
     * Sets magic
     *
     * @param bool|null $magic 标记该系统是否支持部分设备证书能秒出激活的功能
     *
     * @return self
     */
    public function setMagic($magic)
    {
        $this->container['magic'] = $magic;

        return $this;
    }

    /**
     * Gets magic_unit
     *
     * @return float|null
     */
    public function getMagicUnit()
    {
        return $this->container['magic_unit'];
    }

    /**
     * Sets magic_unit
     *
     * @param float|null $magic_unit 部分秒出证书单价
     *
     * @return self
     */
    public function setMagicUnit($magic_unit)
    {
        $this->container['magic_unit'] = $magic_unit;

        return $this;
    }

    /**
     * Gets quick
     *
     * @return bool|null
     */
    public function getQuick()
    {
        return $this->container['quick'];
    }

    /**
     * Sets quick
     *
     * @param bool|null $quick 标记该系统是否支持全部设备证书能立即秒出激活的功能
     *
     * @return self
     */
    public function setQuick($quick)
    {
        $this->container['quick'] = $quick;

        return $this;
    }

    /**
     * Gets quick_unit
     *
     * @return float|null
     */
    public function getQuickUnit()
    {
        return $this->container['quick_unit'];
    }

    /**
     * Sets quick_unit
     *
     * @param float|null $quick_unit 全量秒出证书单价
     *
     * @return self
     */
    public function setQuickUnit($quick_unit)
    {
        $this->container['quick_unit'] = $quick_unit;

        return $this;
    }

    /**
     * Gets reserve
     *
     * @return bool|null
     */
    public function getReserve()
    {
        return $this->container['reserve'];
    }

    /**
     * Sets reserve
     *
     * @param bool|null $reserve 标记该系统是否支持预定设备证书的功能
     *
     * @return self
     */
    public function setReserve($reserve)
    {
        $this->container['reserve'] = $reserve;

        return $this;
    }

    /**
     * Gets reserve_unit
     *
     * @return float|null
     */
    public function getReserveUnit()
    {
        return $this->container['reserve_unit'];
    }

    /**
     * Sets reserve_unit
     *
     * @param float|null $reserve_unit 预定证书服务单价
     *
     * @return self
     */
    public function setReserveUnit($reserve_unit)
    {
        $this->container['reserve_unit'] = $reserve_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


